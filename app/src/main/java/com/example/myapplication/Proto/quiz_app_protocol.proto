syntax = "proto2";

// For our use case it's very likely Protocol Buffers will be able to 1) Shrink the amount of bytes per message considerably.
// 2) Allow us to easily handle messages based on their schema. While it is not human readable it is extremely efficient and
// can be used as a primitive protocol. For example, if we receive bytes that match the user assignemnt type we know to assign the
// the device's generated responses to use that user_id.
message MultipleChoiceResponse {
     optional int64 message_id = 1;
     required int64 question = 2;
     required string answer = 3;
     required int64 user_id = 4;
     required int64 quiz_id = 5;
     required string type = 6; // type = 'user_response'
     required string order = 7; // order is really an enum = 1, 2, 3, 4, 5, 6, 7
}

message MultipleChoiceQuestion {
    optional int64 message_id = 1;
    required string answer = 2;
    repeated string choices = 3;
    required string prompt = 4;
    required int64 quiz_id = 5;
    required string type = 6; // type = 'multiple_choice_broadcast'
}

// This is meant to be sent from server to a device. It gives that device association with that user_id.
message UserAssignment{
    required int64 user_id = 1;
    required string type = 2; // 'type = 'userAssignment'
    required string order = 3;
}

// This is meant to be sent from client device to server. It associates a nickname with the user_id.
message UpdateUserNickName{
    required int64 user_id = 1;
    required string nickname = 2;
    required string type = 3; // type = 'updateUserNickName'
    required string order = 4;
}

message Sync{
    required int64 messageid = 1;
    required string type = 2;
}

message Ack{
    required int64 messageid = 1;
    required int64 message_id_to_ack = 2;
    required string type = 3;
}

message RST{
    required int64 message_id = 1;
    required int64 message_id_that_produced_this = 2;
    optional bool failure_occurred = 3;
    optional int64 failure_type = 4;
    required string type = 5;
}

message IAmNowServer{
    required int64 order = 1;
    required string type = 2;
    required int64 port = 3;
}

