syntax = "proto2";

// For our use case it's very likely Protocol Buffers will be able to 1) Shrink the amount of bytes per message considerably.
// 2) Allow us to easily handle messages based on their schema. While it is not human readable it is extremely efficient and
// can be used as a primitive protocol. For example, if we receive bytes that match the user assignemnt type we know to assign the
// the device's generated responses to use that user_id.

message MultipleChoiceResponse {
    optional int64 id = 1;
    required int64 question = 2;
    required string answer = 3;
    required int64 user_id = 4;
    required int64 quiz_id = 5;
}

message MultipleChoiceQuestion {
    optional int64 id = 1;
    required string answer = 2;
    repeated string choices = 3;
    required string prompt = 4;
    required int64 quiz_id = 5;
}


// This is meant to be sent from server to a device. It gives that device association with that user_id.
message UserAssignment{
    required int64 user_id = 1;
}

// This is meant to be sent from client device to server. It associates a nickname with the user_id.
message UpdateUserNickName{
    required int64 user_id = 1;
    required string nickname = 2;
}

message UpdateResponse {
    required int64 id = 1;
    required string answer = 2;
    required int64 user_id = 3;
    required int64 quiz_id = 4;
}
